
How to update the subtree?

Do a fetch on the remote, if no changes then good
If changes then create a local branch of the subtree pointing to camunda converter using a remote, pull the new data, compile and then merge
with the subtree in the main branch
can keep the local branch in order to see how many commits behind we are with respect to the remote


Use git tree diff between subtree and branch if necessary



a. In case you are ever asked for a login, follow this guide to get the authentication token and login to github via terminal: https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

b. In case you changed your token and/or need to reset it, do the following:
- Check the value of credential manager. > git config --system credential.helper --> Note this value for later; you will need it to set things back.
- Unset the credential manager, which will prompt you for PW going forward. > git config --system --unset credential.helper
Next time you will be asked to insert the username and password again

c. The following steps are the ones I first followed to understand how subtrees work. You can read the following steps and/or reproduce them by creating 2 repos in your account:
1. One named 'learning' - which will be the one in which you will add the subtree
2. The other named 'learning-doc' - which will be used as subtree in the repo above

When creating the repos, flag the option to create the 'README.md' file so your initial branch will be named 'main'



HOW TO ADD A SUBTREE?

0. On your computer, locally, open terminal and go inside the repo 'learning'.
Then activate the 'main' branch by typing the following:
> git branch (-a) --> to list the branches of the repo
> git checkout main --> to select the main branch (or it could be master in some cases - not this case)

1. Use an alias for the repo to be used as a subtree to make it easier to refer to the repo
> git remote add learning-doc https://github.com/apuleius27/learning-doc --> we add the learning-doc repo to the remotes (you can use your own repo - e.g. https://github.com/your-github-username/learning-doc)
> git remote -v --> to list the added remotes

2. Add the subtree by pulling the repo 'learning-doc' in this way:
> git subtree add --prefix SUB learning-doc main --squash --> this will create the folder 'SUB' and pull the data in it from the 'learning-doc' remote (that we added before) and from the 'main' branch of that remote

3. Publish the changes. Either use github desktop (since it is easier) - or do the following - to publish the changes:
> git commit
> git push


HOW TO UPDATE A SUBTREE?

a. To update a subtree automatically and without the need to check for the differences, follow the steps below. This method is recommended:
- When you use a subtree without modifying any of the files inside it, and
- When there are zero integrations between the subtree and the repo in which the subtree is pulled

1. Fetch the remote repo to see if there are any changes.
> git fetch learning-doc main --> this will fetch the 'main' branch from the repo 'learning-doc'

If no changes, then no need to update anything.
If there are changes, then follow step 2.

2. fetch and merge the changes automatically by using the following:
git subtree pull --prefix SUB learning-doc main --squash


b. In case you want to see the modifications made to 
how to make changes to a subtree (e.g. if i want to improve some functions) and then update the subtree with modifications made to the repo?

If i add a file to the subtree, it remains after the merge
If i delete a file from the subtree, it is NOT added back after the merge

so, how to see the differences?

if using only command line, my idea is the following:

1. create a new branch and go in there
e.g. git branch new
git checkout new

2. delete the subtree repo in it and then git push to publish changes
e.g. git rm MVA -r -f

3. add subtree (cf. points above).. this should add the whole subtree (e.g. adding any file that was removed and deleting added files)

4. do a difference between the two branches
e.g. from the branch we are modifying, do git diff main


if instead we want and can use a gui, we can use meld. Install meld (see guides)

we can follow procedure above or we can create a new subtree and clone/pull the remote repo there and then we use meld to do the diff between the two subtrees (the old one and the new one just pulled) and decide how to merge.
e.g. meld file1 file2
