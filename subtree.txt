
a. In case you are ever asked for a login, follow this guide to get the authentication token and login to github via terminal: https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token

b. In case you changed your token and/or need to reset it, do the following:
- Check the value of credential manager. > git config --system credential.helper --> Note the output value for later; you will need it to set things back (e.g. osxkeychain)
- Unset the credential manager, which will prompt you for PW going forward. > git config --system --unset credential.helper --> Going forward, you will be prompted to insert the username and password again
- Set the value of the credential manager back to what it was e.g. osxkeychain in my case: git config --system credential.helper osxkeychain --> use the value you noted at the first step

c. In case, when doing merges, you are shown a vi/vim terminal, then just do:
> :wq

d. The following steps are the ones I first followed to understand how subtrees work. You can read the following steps and/or reproduce them by creating 2 repos in your account:
1. One named 'learning' - which will be the one in which you will add the subtree
2. The other named 'learning-doc' - which will be used as subtree in the repo above

When creating the repos, flag the option to create the 'README.md' file so your initial branch will be named 'main'



HOW TO ADD A SUBTREE?

0. On your computer, locally, open terminal and go inside the repo 'learning'.
Then activate the 'main' branch by typing the following:
> git branch (-a) --> to list the branches of the repo
> git checkout main --> to select the main branch (or it could be master in some cases - not this case)

1. Use an alias for the repo to be used as a subtree to make it easier to refer to the repo
> git remote add learning-doc https://github.com/apuleius27/learning-doc --> we add the learning-doc repo to the remotes (you can use your own repo - e.g. https://github.com/your-github-username/learning-doc)
> git remote -v --> to list the added remotes

2. Add the subtree by pulling the repo 'learning-doc' in this way:
> git subtree add --prefix SUB learning-doc main --squash --> this will create the folder 'SUB' and pull the data in it from the 'learning-doc' remote (that we added before) and from the 'main' branch of that remote

3. Publish the changes. Either use github desktop (since it is easier) - or do the following - to publish the changes:
> git commit
> git push


HOW TO UPDATE A SUBTREE?

a. To update a subtree automatically and without the need to check for the differences, follow the steps below. This method is recommended:
- When you use a subtree without modifying any of the files inside it, and
- When there are zero integrations between the subtree and the repo in which the subtree is pulled

1. Fetch the remote repo to see if there are any changes.
> git fetch learning-doc main --> this will fetch the 'main' branch from the repo 'learning-doc'

If no changes, then no need to update anything.
If there are changes, then follow step 2.

2. fetch and merge the changes automatically by using the following:
git subtree pull --prefix SUB learning-doc main --squash


b. In case you want to see the modifications made to the subtree repo before merging and/or merge only parts of the subtree, then follow the steps below. 
Keep in mind that:
- If you add a file to the subtree, it remains after the merge with subtree repo
- If you delete a file from the subtree, it is NOT added back after the merge with subtree repo

This method is recommended:
- To deal with the above situations. E.g. when you want to delete a file you added but the subtree repo does not have
- E.g. when you want to make changes to a subtree (e.g. if you want to improve some functions) and then update the subtree with modifications made to the subtree repo
- When the subtree has integrations with the repo you are using, so you want to test that modifications don't break the code (for this situation, a good paractice is to have tests in place for the code - out of scope from this guide)


There are many ways to do what is explained at the point b. above, but here is my idea.

We have two options:
- Using GUI 
- Using command line

Using GUI:

0. Install MELD (see other guides) so that we can use it to compare the differences

00. Modify a file in the subtree repo (e.g. modify the markdown file) so we can follow the steps below

1. create a new branch and go in there
> git branch new
> git checkout new

2. pull the subtree and "save it" in a different folder than where the original subtree is saved
> git subtree add --prefix SUB2 learning-doc main --squash --> new subtree added in folder "SUB2"

3. Use meld to compare the differences. We can open meld and compare the folders with the gui, or we can type the following:
> meld SUB SUB2 --> this will open meld and compare the two folders

4. We decide what to keep or delete and so on, then we merge (either manually/graphically) or, in case the modifications are fine, we follow the merge process described above.
Then delete the new subtree folder:
> git rm SUB2 -r -f

5. Exit from the current branch
> git checkout main

5. we open a pull request and merge this new branch with the main branch (from github desktop and/or online). If you want to use command line, follow this guide as a strating point: https://stackoverflow.com/questions/37770467/why-do-i-have-to-git-push-set-upstream-origin-branch

Using command line:
There are better ways, but this is my idea at the moment:

1. 1. create a new branch and go in there
> git branch new
> git checkout new

2. delete the subtree repo in it and then git push to publish changes
e.g. git rm SUB -r -f

3. add subtree (cf. points above).. this should add the whole subtree (e.g. adding any file that was removed and deleting added files)

4. do a difference between the two branches
e.g. from the branch we are modifying, do:
> git diff main

5. merge the branches and so on


HOW TO RESET A SUBTREE?

> git rm SUB -r -f
> git subtree add --prefix SUB learning-doc main --squash





